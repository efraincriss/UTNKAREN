using System;
using System.Data.Entity;
using System.Linq;
using Abp.Domain.Repositories;
using com.cpp.calypso.comun.dominio;
using com.cpp.calypso.framework;

namespace com.cpp.calypso.comun.aplicacion
{
    /// <summary>
    /// Servicio de View. 
    /// </summary>
    public class ViewService : IViewService 
       {
        private readonly IBaseRepository<View> repository;
        private IAutoGeneratedView _autoGeneratedView;
        private ISerializerLayout _serializerLayout;
        private ICacheManager _cacheManager;
        private readonly IGenerateWidget generateWidget;
        private string _format_key_cache = "_view_{0}";

        public ViewService(
            IBaseRepository<View> repository,
            IAutoGeneratedView autoGeneratedView,
            ISerializerLayout serializerLayout,
            ICacheManager cacheManager,
            IGenerateWidget generateWidget ) {

            this.repository = repository;
            _autoGeneratedView = autoGeneratedView;
            _serializerLayout = serializerLayout;
            _cacheManager = cacheManager;
            this.generateWidget = generateWidget;
        }

        public View Get(string name)
        {

            var _keyCache = string.Format(_format_key_cache, name);

            View view = _cacheManager.GetData(_keyCache) as View;

            if (view == null)
            {
              
                view =  (from v in repository.GetAll() 
                        where v.Name == name
                        select v).FirstOrDefault();
                
                if (view != null)
                {

                  
                    //Reflexion. Get Type Model
                    view.ModelType = Type.GetType(view.Model);

                    if (view.ModelType == null)
                    {
                        var msg = string.Format("El modelo {0} de la vista {0} no se puede recuperar. Revisar si el modelo tiene formato [namespace.nombre_modelo, nombre_assembly]",
                            view.Model, view.Name);

                        throw new GenericException(msg, msg);
                    }

                    //Generate Layout from XML
                    view.Layout = _serializerLayout.GetLayoutFormStringArch(view.Arch);


                    //Establecer generador de widget
                    view.Layout.GenerateWidget = generateWidget;

                    //Process View
                    view.Layout.ProcessView(view.ModelType);

                    _cacheManager.Add(_keyCache, view);

                    return view;
                }
                else
                {
                    return null;
                }
            }

            return view;
        }


        public View Get(Type typeModel, Type typeLayout)
        {
            //TODO: Repository. Option One
    
            //TODO: Definir convencion.. (tipo.form) (tipo.tree)
            string nameView = string.Format("{0}.{1}", typeModel.FullName, typeLayout.Name);
         
            //1. Buscar en la base de Datos.
            var view =  Get(nameView);

            if (view != null)
            {
                return view;
            }

            var _keyCache = string.Format(_format_key_cache, nameView);

            view = _cacheManager.GetData(_keyCache) as View;
            if (view == null) {
                view = AutoGeneratedView(typeModel, typeLayout);
                _cacheManager.Add(_keyCache, view);
            }

            return view;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="typeModel"></param>
        /// <param name="typeLayout"></param>
        /// <returns></returns>
        protected View AutoGeneratedView(Type typeModel, Type typeLayout) {

            if (typeLayout == typeof(Tree))
            {
                //2. Si no encuentra auto-generar vista
                var view = _autoGeneratedView.GetViewTree(typeModel);
                return view;
            }

            if (typeLayout == typeof(Form))
            {
                //2. Si no encuentra auto-generar vista
                var view = _autoGeneratedView.GetViewForm(typeModel);
                return view;
            }

            if (typeLayout == typeof(Search))
            {
                //2. Si no encuentra auto-generar vista
                var view = _autoGeneratedView.GetViewSearch(typeModel);
                return view;
            }

            throw new NotSupportedException(string.Format("View not SupportedSupported. Type of Layout {0}", typeLayout));

        }

        public View RegisterOrGet(string nameViewSearch, Func<string, View> actionCreate)
        {

            var _keyCache = string.Format(_format_key_cache, nameViewSearch);

            View view = _cacheManager.GetData(_keyCache) as View;

            if (view == null)
            {
                view = actionCreate(nameViewSearch);

                _cacheManager.Add(_keyCache, view);

            }

            return view;
        }
    }
    
}