using Abp.Application.Services.Dto;
using Abp.Domain.Entities;
using Abp.Domain.Entities.Auditing;
using com.cpp.calypso.comun.dominio;
using com.cpp.calypso.framework;
using System;
using System.Collections.Generic;
using System.Reflection;

namespace com.cpp.calypso.comun.aplicacion
{
    
    /// <summary>
    /// Generacion automatica de vistas para entidades 
    /// </summary>
    public class AutoGeneratedView: IAutoGeneratedView
    {
        private readonly IGenerateWidget generateWidget;

        public AutoGeneratedView(IGenerateWidget generateWidget )
        {
            this.generateWidget = generateWidget;
        }

        public virtual View GetViewTree(Type type)
        {
          
            //View
            View view = new View();
            view.Name = type.FullName;
            view.Model = GenerateNameModel(type);
            view.Arch = string.Empty;
     

            //Tree
            var layout = GeneratedTreeView(type);
            view.Layout = layout;
            return view;
        }

        public virtual View GetViewForm(Type type)
        {

            //View
            View view = new View();
            view.Name = type.FullName;
            view.Model = GenerateNameModel(type);
            view.Arch = string.Empty;
 
            //Form
            var layout = GeneratedFormView(type);
            view.Layout = layout;
            return view;
        }

        public View GetViewSearch(Type type)
        {
            //View
            View view = new View();
            view.Name = type.FullName;
            view.Model = GenerateNameModel(type);
            view.Arch = string.Empty;


            //Search
            var layout = GeneratedSearchView(type);
            view.Layout = layout;
            return view;
        }

        protected virtual string GenerateNameModel(Type type) {
            return string.Format("{0}, {1}", type.FullName, type.Assembly.GetName().Name); 
        }


        public virtual Form GeneratedFormView(Type type) {

            Form layout = new Form(generateWidget);

            //Reflection
            BindingFlags memberFlags = BindingFlags.Public | BindingFlags.Instance;
            PropertyInfo[] properties = type.GetProperties(memberFlags);

            foreach (var pro in properties)
            {
                if (ConsiderFieldView(pro.PropertyType))
                {
                    // Is Primitive, or Decimal, or String
                    FieldForm field = new FieldForm();
                    field.Name = pro.Name;
                    field.Invisible = false;
                    field.FieldType = pro.PropertyType;

                    //TODO: LAS PROPIEDADES INVISIBLES NO DEBERIAN TENER WIDGET
                    //ANALIZAR LA MEJOR FORMA... DE NO COLOCAR.. 
                    //widget
                    field.Widget = generateWidget.AutoGenerate(pro);
                    layout.Fields.Add(field);
                }
            }


            //Filter properties invisible = true
            //IAuditableEntity, IEntity, IVersionable,IAssociatedEntitySystem
            layout = InvisiblePropertiesInterface(layout, type, typeof(IEntity));
            layout = InvisiblePropertiesInterface(layout, type, typeof(IEntityDto));
            layout = InvisiblePropertiesInterface(layout, type, typeof(IVersionable));

            //ICreationAudited, IHasCreationTime, IModificationAudited, IHasModificationTime
            layout = DeletePropertiesInterface(layout, type, typeof(ICreationAudited));
            layout = DeletePropertiesInterface(layout, type, typeof(IHasCreationTime));
            layout = DeletePropertiesInterface(layout, type, typeof(IModificationAudited));
            layout = DeletePropertiesInterface(layout, type, typeof(IHasModificationTime));
            
            layout = DeletePropertiesInterface(layout, type, typeof(IAudited));

            layout = DeletePropertiesInterface(layout, type, typeof(IDeletionAudited));
            layout = DeletePropertiesInterface(layout, type, typeof(IHasDeletionTime));
            layout = DeletePropertiesInterface(layout, type, typeof(ISoftDelete));
     
            layout = DeletePropertiesInterface(layout, type, typeof(IFullAudited));


            

            return layout;
        }


        public bool ConsiderFieldView(Type type)
        {

            //if (type.IsPrimitive || type == typeof(Decimal) || type == typeof(String) || type == typeof(DateTime))
            //    return true;

            //if (type.IsGenericType && type.GetGenericTypeDefinition() == typeof(Nullable<>))
            //{
            //    Type typeOrigin = Nullable.GetUnderlyingType(type);

            //    if (typeOrigin.IsPrimitive || typeOrigin == typeof(Decimal) || typeOrigin == typeof(String) || typeOrigin == typeof(DateTime))
            //        return true;
            //}

            //TODO: Todos

            return true;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="type"></param>
        /// <returns></returns>
        public virtual Tree GeneratedTreeView(Type type) {

            Tree layout = new Tree();
            layout.Create = true;
            layout.Edit = true;
            layout.Delete = true;

           
            //Reflection
            BindingFlags memberFlags = BindingFlags.Public | BindingFlags.Instance;
            PropertyInfo[] properties = type.GetProperties(memberFlags);

            foreach (var pro in properties)
            {
                
                if (ConsiderFieldTree(pro.PropertyType))
                {
                    // Is Primitive, or Decimal, or String
                    Field field = new Field();
                    field.Name = pro.Name;
                    field.Invisible = false;
                    field.String = pro.GetDescription();

                    layout.Fields.Add(field);
                }
            }

            //Filter properties invisible = true
            //IAuditableEntity, IEntity, IVersionable
            layout = InvisiblePropertiesInterface(layout,type,typeof(IEntity));
            layout = InvisiblePropertiesInterface(layout, type, typeof(IEntityDto));
            layout = InvisiblePropertiesInterface(layout, type, typeof(IVersionable));

            layout = InvisiblePropertiesInterface(layout, type, typeof(ICreationAudited));
            layout = InvisiblePropertiesInterface(layout, type, typeof(IHasCreationTime));
            layout = InvisiblePropertiesInterface(layout, type, typeof(IModificationAudited));
            layout = InvisiblePropertiesInterface(layout, type, typeof(IHasModificationTime));

            layout = InvisiblePropertiesInterface(layout, type, typeof(IAudited));

            layout = InvisiblePropertiesInterface(layout, type, typeof(IDeletionAudited));
            layout = InvisiblePropertiesInterface(layout, type, typeof(IHasDeletionTime));
            layout = InvisiblePropertiesInterface(layout, type, typeof(ISoftDelete));
 
            layout = InvisiblePropertiesInterface(layout, type, typeof(IFullAudited));

 
            //TODO: Atributes
            //ScaffoldColumn
            //ReadOnly
            //HiddenInput

            return layout;
        }

        public bool ConsiderFieldTree(Type type) {

            if (type.IsPrimitive || type == typeof(Decimal) || type == typeof(String) || type == typeof(DateTime))
                return true;

            if (type.IsGenericType && type.GetGenericTypeDefinition() == typeof(Nullable<>)) {
                Type typeOrigin = Nullable.GetUnderlyingType(type);

                if (typeOrigin.IsPrimitive || typeOrigin == typeof(Decimal) || typeOrigin == typeof(String) || typeOrigin == typeof(DateTime))
                    return true;
            }

            //TODO: Definir si Array es considerado ??

            return false;
        }


        public Form DeletePropertiesInterface(Form layout, Type origin, Type typeInterface)
        {

            if (typeInterface.IsInterface && origin.Implements(typeInterface))
            {

                BindingFlags memberFlags = BindingFlags.Public | BindingFlags.Instance;
                PropertyInfo[] properties = typeInterface.GetProperties(memberFlags);

                foreach (var pro in properties)
                {
                    List<FieldForm> list = layout.Fields;
                    List<FieldForm> listDelete = new List<FieldForm>();
                    foreach (var field in list)
                    {
                        if (field.Name == pro.Name)
                        {
                            listDelete.Add(field);
                        }
                    }

                    foreach (var item in listDelete)
                    {
                        layout.Fields.Remove(item);
                    }
                }
            }

            return layout;
        }

        public Form InvisiblePropertiesInterface(Form layout, Type origin, Type typeInterface)
        {

            if (typeInterface.IsInterface && origin.Implements(typeInterface))
            {

                //BindingFlags memberFlags = BindingFlags.Public | BindingFlags.Instance | BindingFlags.FlattenHierarchy;
                PropertyInfo[] properties = typeInterface.GetPublicProperties();

                foreach (var pro in properties)
                {
                    foreach (var field in layout.Fields)
                    {
                        if (field.Name == pro.Name)
                        {
                            field.Invisible = true;
                        }
                    }
                }
            }

            return layout;
        }

        public Tree InvisiblePropertiesInterface(Tree layout,Type origin, Type typeInterface) {

            if (typeInterface.IsInterface && origin.Implements(typeInterface)) {

                //BindingFlags memberFlags = BindingFlags.Public | BindingFlags.Instance;
                PropertyInfo[] properties = typeInterface.GetPublicProperties();

                foreach (var pro in properties)
                {
                    foreach (var field in layout.Fields)
                    {
                        if (field.Name == pro.Name) {
                            field.Invisible = true;
                        }
                    }
                }
            }

            return layout;
        }

        

        public Search GeneratedSearchView(Type type)
        {
            Search layout = new Search();


            //Reflection
            BindingFlags memberFlags = BindingFlags.Public | BindingFlags.Instance;
            //PropertyInfo[] properties = type.GetProperties(memberFlags);

            //TODO: Definir AutoGeneration Search
            //Option 1. All Fields String. Nombres, Descripcion, Observaciones??
            

            //Option 2. If type is Named. IEntityNamed
            if (type.Implements(typeof(IEntityNamed))) {
                PropertyInfo[] propertiesInteface = typeof(IEntityNamed).GetProperties(memberFlags);

                foreach (var pro in propertiesInteface)
                {
                    var field = new FieldSearch();
                    field.Name = pro.Name;

                    //TODO: El operador segun el tipo de la propiedad
                    //Ejemplo string like, int =, date =, etc.
                    field.Operator = "==";

                    field.FieldType = pro.PropertyType;
                    field.String = pro.Name;

                    layout.Fields.Add(field);
                }
            }

            //Option 3. Name, Nombre,Nombres, State
            //PropertyInfo[] properties = type.GetProperties(memberFlags);
            //string[] commons = { "NAME", "NOMBRE", "NOMBRES" };

            //foreach (var pro in properties)
            //{
            //    if (Array.IndexOf(commons, pro.Name.ToUpper()) > -1)
            //    {
            //        var field = new FieldSearch();
            //        field.Name = pro.Name;
            //        field.Operator = "==";
            //        field.String = pro.Name;

            //        layout.Fields.Add(field);
            //    }
            //}

            return layout;
        }
    }
}