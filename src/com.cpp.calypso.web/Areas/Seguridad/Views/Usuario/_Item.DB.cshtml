@model CrearUsuarioDto

@{
    var modulosList = ViewBag.Modulos as IReadOnlyList<ModuloDto>;
    var rolesList = ViewBag.Roles as IReadOnlyList<RolDto>;
}

<div class="form-horizontal">

    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

 
    <div class="form-group row">
        @Html.LabelFor(model => model.Identificacion, htmlAttributes: new { @class = "col-md-3 col-form-label" })
        <div class="col-md-9">
            @Html.EditorFor(model => model.Identificacion, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Identificacion, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group row">
        @Html.LabelFor(model => model.Nombres, htmlAttributes: new { @class = "col-md-3 col-form-label" })
        <div class="col-md-9">
            @Html.EditorFor(model => model.Nombres, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Nombres, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group row">
        @Html.LabelFor(model => model.Apellidos, htmlAttributes: new { @class = "col-md-3 col-form-label" })
        <div class="col-md-9">
            @Html.EditorFor(model => model.Apellidos, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Apellidos, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group row">
        @Html.LabelFor(model => model.Cuenta, htmlAttributes: new { @class = "col-md-3 col-form-label" })
        <div class="col-md-9">
            @Html.EditorFor(model => model.Cuenta, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Cuenta, "", new { @class = "text-danger" })
        </div>
    </div>


    <div class="form-group row">
        @Html.LabelFor(model => model.Estado, htmlAttributes: new { @class = "col-md-3 col-form-label" })
        <div class="col-md-9">

            @Html.EnumDropDownListFor(model => model.Estado, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.Estado, "", new { @class = "text-danger" })
        </div>



    </div>

    <div class="form-group row">
        @Html.LabelFor(model => model.Correo, htmlAttributes: new { @class = "col-md-3 col-form-label" })
        <div class="col-md-9">
            @Html.EditorFor(model => model.Correo, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Correo, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group row">
        @Html.LabelFor(model => model.Modulos, htmlAttributes: new { @class = "col-md-3 col-form-label" })
        <div class="col-md-9 col-form-label">
            @foreach (var item in modulosList)
            {
                <div class="form-check checkbox">
                    <input class="form-check-input" type="checkbox" name="Modulos" title="@item.Nombre" value="@item.Id" id="@string.Format("modulo{0}", item.Id)" @(UsuarioTieneModulo(Model, item) ? "checked" : "") />
                    <label class="form-check-label" for="@string.Format("modulo{0}", item.Id)" title="@item.Nombre">@item.Nombre</label>
                </div>
            }
        </div>
    </div>


    <div class="form-group row">
        @Html.LabelFor(model => model.Roles, htmlAttributes: new { @class = "col-md-3 col-form-label" })
        <div class="col-md-9 col-form-label">
            @foreach (var role in rolesList)
            {
                <div class="form-check checkbox">
                    <input class="form-check-input" type="checkbox" name="Roles" data-role-name="@role.Nombre" title="@role.Nombre" value="@role.Nombre" id="@string.Format("rol{0}", role.Id)" @(UsuarioTieneRol(Model, role) ? "checked" : "") />
                    <label class="form-check-label" for="@string.Format("rol{0}", role.Id)" title="@role.Nombre">@role.Nombre</label>
                </div>
            }
        </div>
    </div>

</div>

@functions
{

    private static bool UsuarioTieneRol(CrearUsuarioDto modelo, RolDto dto)
    {
        return modelo.Roles != null && modelo.Roles.Any(r => r == dto.Nombre);
    }

    private static bool UsuarioTieneModulo(CrearUsuarioDto modelo, ModuloDto dto)
    {
        return modelo.Modulos != null && modelo.Modulos.Any(r => r == dto.Id);
    }
}